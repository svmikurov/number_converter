"""Mapping of number with it text representation."""

from .types import Case, CaseGroup, Factor, Gender

# fmt: off
TENS_ENDINGS = Case(
    'десят', 'десяти', 'десяти',
    'десят', 'десятью', 'десяти',
)
HUNDREDS_ENDINGS = Case(
    'сот', 'сот', 'стам',
    'сот', 'стами', 'стах',
)

PRIME_CASES: dict[int, Case] = {
    0: Case(
        'ноль', 'ноля', 'нолю',
        'ноль', 'нолем', 'ноле',
    ),
    1: Case(
        Gender('один', 'одна', 'одно'),
        Gender('одного', 'одной', 'одного'),
        Gender('одному', 'одной', 'одному'),
        Gender('один', 'одну', 'одно'),
        Gender('одним', 'одной', 'одним'),
        Gender('одном', 'одной', 'одном'),
    ),
    2: Case(
        Gender('два', 'две', 'два'),
        Gender('двух', 'двух', 'двух'),
        Gender('двум', 'двум', 'двум'),
        Gender('два', 'две', 'два'),
        Gender('двумя', 'двумя', 'двумя'),
        Gender('двух', 'двух', 'двух'),
    ),
    3: Case(
        'три', 'трёх', 'трём',
        'три', 'тремя', 'трёх',
    ),
    4: Case(
        'четыре', 'четырёх', 'четырём',
        'четыре', 'четырьмя', 'четырёх',
    ),
    5: Case(
        'пять', 'пяти', 'пяти',
        'пять', 'пятью', 'пяти',
    ),
    6: Case(
        'шесть', 'шести', 'шести',
        'шесть', 'шестью', 'шести',
    ),
    7: Case(
        'семь', 'семи', 'семи',
        'семь', 'семью', 'семи',
    ),
    8: Case(
        'восемь', 'восьми', 'восьми',
        'восемь', 'восьмью', 'восьми',
    ),
    9: Case(
        'девять', 'девяти', 'девяти',
        'девять', 'девятью', 'девяти',
    ),
    10: Case(
        'десять', 'десяти', 'десяти',
        'десять', 'десятью', 'десяти',
    ),
    11: Case(
        'одиннадцать', 'одиннадцати', 'одиннадцати',
        'одиннадцать', 'одиннадцатью', 'одиннадцати',
    ),
    12: Case(
        'двенадцать', 'двенадцати', 'двенадцати',
        'двенадцать', 'двенадцатью', 'двенадцати',
    ),
    13: Case(
        'тринадцать', 'тринадцати', 'тринадцати',
        'тринадцать', 'тринадцатью', 'тринадцати',
    ),
    14: Case(
        'четырнадцать', 'четырнадцати', 'четырнадцати',
        'четырнадцать', 'четырнадцатью', 'четырнадцати',
    ),
    15: Case(
        'пятнадцать', 'пятнадцати', 'пятнадцати',
        'пятнадцать', 'пятнадцатью', 'пятнадцати',
    ),
    16: Case(
        'шестнадцать', 'шестнадцати', 'шестнадцати',
        'шестнадцать', 'шестнадцатью', 'шестнадцати',
    ),
    17: Case(
        'семнадцать', 'семнадцати', 'семнадцати',
        'семнадцать', 'семнадцатью', 'семнадцати',
    ),
    18: Case(
        'восемнадцать', 'восемнадцати', 'восемнадцати',
        'восемнадцать', 'восемнадцатью', 'восемнадцати',
    ),
    19: Case(
        'девятнадцать', 'девятнадцати', 'девятнадцати',
        'девятнадцать', 'девятнадцатью', 'девятнадцати',
    ),
    20: Case(
        'двадцать', 'двадцати', 'двадцати',
        'двадцать', 'двадцатью', 'двадцати',
    ),
    30: Case(
        'тридцать', 'тридцати', 'тридцати',
        'тридцать', 'тридцатью', 'тридцати',
    ),
    40: Case(
        'сорок', 'сорока', 'сорока',
        'сорок', 'сорока', 'сорока',
    ),
    90: Case(
        'девяносто', 'девяноста', 'девяноста',
        'девяносто', 'девяноста', 'девяноста',
    ),
    100: Case(
        'сто', 'ста', 'ста',
        'сто', 'ста', 'ста',
    ),
    200: Case(
        'двести', 'двухсот', 'двумстам',
        'двести', 'двумястами', 'двухстах',
    ),
    300: Case(
        'триста', 'трёхсот', 'трёмстам',
        'триста', 'тремястами', 'трёхсот',
    ),
    400: Case(
        'четыреста', 'четырёхсот', 'четырёмстам',
        'четыреста', 'четырьмястами', 'четырёхстах',
    ),
}


def create_complex(number: int, endings: Case) -> Case:
    """Create the declension of a complex numeral."""
    return Case(
        str(PRIME_CASES[number].nominative) + str(endings.nominative),
        str(PRIME_CASES[number].genitive) + str(endings.genitive),
        str(PRIME_CASES[number].dative) + str(endings.dative),
        str(PRIME_CASES[number].accusative) + str(endings.accusative),
        str(PRIME_CASES[number].instrumental) + str(endings.instrumental),
        str(PRIME_CASES[number].prepositional) + str(endings.prepositional),
    )


TENS_CASES: dict[int, Case] = {
    50: create_complex(5, TENS_ENDINGS),
    60: create_complex(6, TENS_ENDINGS),
    70: create_complex(7, TENS_ENDINGS),
    80: create_complex(8, TENS_ENDINGS),
}


NUMERAL_CASES = PRIME_CASES | TENS_CASES


FACTOR_CASES: dict[Factor, dict[CaseGroup, Case]] = {
    Factor.THOUSANDS: {
        CaseGroup.FIRST: Case(
            'тысяча', 'тысячи', 'тысяче',
            'тысячу', 'тысячей', 'тысяче',
        ),
        CaseGroup.UNITS: Case(
            'тысячи', 'тысяч', 'тысячам',
            'тысячи', 'тысячами', 'тысячах',
        ),
        CaseGroup.OTHER: Case(
            'тысяч', 'тысяч', 'тысячам',
            'тысяч', 'тысячами', 'тысячах',
        ),
    },
    Factor.MILLIONS: {
        CaseGroup.FIRST: Case(
            'миллион', 'миллиона', 'миллиону',
            'миллион', 'миллионом', 'миллионе',
        ),
        CaseGroup.UNITS: Case(
            'миллиона', 'миллионов', 'миллионам',
            'миллиона', 'миллионами', 'миллионах',
        ),
        CaseGroup.OTHER: Case(
            'миллионов', 'миллионов', 'миллионам',
            'миллионов', 'миллионами', 'миллионах',
        ),
    },
    Factor.BILLIONS: {
        CaseGroup.FIRST: Case(
            'миллиард', 'миллиарда', 'миллиарду',
            'миллиард', 'миллиардом', 'миллиарде',
        ),
        CaseGroup.UNITS: Case(
            'миллиарда', 'миллиардов', 'миллиардам',
            'миллиарда', 'миллиардами', 'миллиардах',
        ),
        CaseGroup.OTHER: Case(
            'миллиардов', 'миллиардов', 'миллиардам',
            'миллиардов', 'миллиардами', 'миллиардах',
        ),
    },
}
