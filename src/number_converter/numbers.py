"""Mapping of number with it text representation."""

from .types import Case, Gender

prime_num: dict[int, Case] = {
    0: Case('ноль', 'ноля', 'нолю', 'ноль', 'нолем', 'ноле'),
    1: Case(
        Gender('один', 'одна', 'одно'),
        Gender('одного', 'одной', 'одного'),
        Gender('одному', 'одной', 'одному'),
        Gender('один', 'одну', 'одно'),
        Gender('одним', 'одной', 'одним'),
        Gender('одном', 'одной', 'одном'),
    ),
    2: Case(
        Gender('два', 'две', 'два'),
        Gender('двух', 'двух', 'двух'),
        Gender('двум', 'двум', 'двум'),
        Gender('два', 'две', 'два'),
        Gender('двумя', 'двумя', 'двумя'),
        Gender('двух', 'двух', 'двух'),
    ),
    3: Case('три', 'трёх', 'трём', 'три', 'тремя', 'трёх'),
    4: Case('четыре', 'четырёх', 'четырём', 'четыре', 'четырьмя', 'четырёх'),
    5: Case('пять', 'пяти', 'пяти', 'пять', 'пятью', 'пяти'),
    6: Case('шесть', 'шести', 'шести', 'шесть', 'шестью', 'шести'),
    7: Case('семь', 'семи', 'семи', 'семь', 'семью', 'семи'),
    8: Case('восемь', 'восьми', 'восьми', 'восемь', 'восьмью', 'восьми'),
    9: Case('девять', 'девяти', 'девяти', 'девять', 'девятью', 'девяти'),
    10: Case('десять', 'десяти', 'десяти', 'десять', 'десятью', 'десяти'),
    11: Case(
        'одиннадцать',
        'одиннадцати',
        'одиннадцати',
        'одиннадцать',
        'одиннадцатью',
        'одиннадцати',
    ),
    12: Case(
        'двенадцать',
        'двенадцати',
        'двенадцати',
        'двенадцать',
        'двенадцатью',
        'двенадцати',
    ),
    13: Case(
        'тринадцать',
        'тринадцати',
        'тринадцати',
        'тринадцать',
        'тринадцатью',
        'тринадцати',
    ),
    14: Case(
        'четырнадцать',
        'четырнадцати',
        'четырнадцати',
        'четырнадцать',
        'четырнадцатью',
        'четырнадцати',
    ),
    15: Case(
        'пятнадцать',
        'пятнадцати',
        'пятнадцати',
        'пятнадцать',
        'пятнадцатью',
        'пятнадцати',
    ),
    16: Case(
        'шестнадцать',
        'шестнадцати',
        'шестнадцати',
        'шестнадцать',
        'шестнадцатью',
        'шестнадцати',
    ),
    17: Case(
        'семнадцать',
        'семнадцати',
        'семнадцати',
        'семнадцать',
        'семнадцатью',
        'семнадцати',
    ),
    18: Case(
        'восемнадцать',
        'восемнадцати',
        'восемнадцати',
        'восемнадцать',
        'восемнадцатью',
        'восемнадцати',
    ),
    19: Case(
        'девятнадцать',
        'девятнадцати',
        'девятнадцати',
        'девятнадцать',
        'девятнадцатью',
        'девятнадцати',
    ),
    20: Case(
        'двадцать',
        'двадцати',
        'двадцати',
        'двадцать',
        'двадцатью',
        'двадцати',
    ),
    30: Case(
        'тридцать',
        'тридцати',
        'тридцати',
        'тридцать',
        'тридцатью',
        'тридцати',
    ),
    40: Case(
        'сорок',
        'сорока',
        'сорока',
        'сорок',
        'сорока',
        'сорока',
    ),
    90: Case(
        'девяносто',
        'девяноста',
        'девяноста',
        'девяносто',
        'девяноста',
        'девяноста',
    ),
    100: Case(
        'сто',
        'ста',
        'ста',
        'сто',
        'ста',
        'ста',
    ),
}


def _create_tens(number: int) -> Case:
    """Create a declension of the numeral denoting tens."""
    return Case(
        str(prime_num[number].nominative) + 'десят',
        str(prime_num[number].genitive) + 'десяти',
        str(prime_num[number].dative) + 'десяти',
        str(prime_num[number].accusative) + 'десят',
        str(prime_num[number].instrumental) + 'десятью',
        str(prime_num[number].prepositional) + 'десяти',
    )


complex_num_tens: dict[int, Case] = {
    50: _create_tens(5),
    60: _create_tens(6),
    70: _create_tens(7),
    80: _create_tens(8),
}

complex_num_hundreds: dict[int, Case] = {}

numerals = prime_num | complex_num_tens
